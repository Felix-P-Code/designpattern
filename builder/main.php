<?php/* 主要解决多方法组装新实例 * Builder 将操作步骤抽象出来 * Director 把步骤具体化组装实现一个新实例 * Factory 继承Bulider实现每个步骤具体要做什么，通过参数最终返回一个产品实例 * Product 新实例里面的属性 * */abstract  class Builder{    public abstract function seOne();    public abstract function seTwo();    public abstract function setThree();}class Product{    private $part = [];    public function add($part){        $this->part[] = $part;    }    public function show(){        foreach($this->part as $vale){            echo "组件 " . $vale . " 安装好了".'<br/>';        }        echo '完成';    }}class Factory extends Builder{    private $product;    public function __construct(Product $product){        $this->product = $product;    }    public function seOne()    {        $this->product->add('factory_1_1');    }    public function seTwo()    {        $this->product->add('factory_1_2');    }    public function setThree()    {        $this->product->add('factory_1_3');    }    public function getProduct(){        return $this->product;    }}class Director{    public function assemble(Builder $builder){        $builder->seOne();        $builder->seTwo();        $builder->setThree();    }}$director = new Director();$factory = new Factory(new Product());$director->assemble($factory);$product = $factory->getProduct();$product->show();