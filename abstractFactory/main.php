<?phpinterface Product{    public function getName();}class PoductA implements Product{    public function getName()    {        echo 'PoductA 产品';    }}interface Factory{    public function create($classname);}class ConcreteFactory1 implements Factory{    public function create($classname)    {        $result = null;        try{            if(class_exists($classname)){                $obj = new $classname;                if($obj instanceof Product){                    $result =  $obj;                }                /*$reflection = new \ReflectionClass($classname);                $obj = $reflection->newInstanceWithoutConstructor();                if($obj instanceof Product){                    $result =  $obj;                }*/            }            if($result==null){                throw new Exception('类不存在');            }        }catch (Exception $e){            die('类不存在');        }        return $result;    }}class Client{    public static function run(Factory $factory){        $make = function($product){            $product->getName();        };       return $make($factory->create(PoductA::class));    }}$factory = new ConcreteFactory1();$product = Client::run($factory);